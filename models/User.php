<?php

namespace app\models;

use Yii;
use yii\db\ActiveRecord;
use yii\web\IdentityInterface;
use yii\base\NotSupportedException;

/**
 * This is the model class for table "{{%user}}".
 *
 * @property integer $id
 * @property string $username
 * @property string $auth_key
 * @property string $password_hash
 * @property string $nickname
 * @property string $avatar
 * @property integer $status
 * @property integer $created_at
 */
class User extends ActiveRecord implements IdentityInterface
{
    /**
     * 正常
     */
    const STATUS_ACTIVE = 1;
    /**
     * 禁用
     */
    const STATUS_DISABLE = 2;


    public static $statusArray = [
        self::STATUS_ACTIVE => '正常',
        self::STATUS_DISABLE => '禁用'
    ];

    public $password;
    public $code;
    public $verifyCode;
    public $captchaName = 'registerCaptcha';
    public static $codeNamePrefix = 'REGISTER.';


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%user}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['status', 'created_at'], 'integer'],
            ['username', 'required'],
            ['username', 'string', 'max' => 20],
            ['username', 'email'],
            ['username', 'unique', 'message' => '此邮箱已经注册。'],
            ['verifyCode', 'required'],
            ['verifyCode', 'validateVerifyCode'],
            ['code', 'required'],
            ['code', 'validateCode'],
            ['nickname', 'required'],
            [['nickname'], 'string', 'min' => 2, 'max' => 12],
            [['auth_key'], 'string', 'max' => 32],
            [['password_hash'], 'string', 'max' => 255],
            ['password', 'required'],
            [['password'], 'string', 'min' => 8, 'max' => 20],
            [['password'], 'match', 'pattern' => '/^[a-zA-Z0-9]+$/u', 'message' => '{attribute}只能为字母和数字。']
            //[['avatar'], 'image', 'extensions' => 'jpg, jpeg,png', 'minSize' => 20 * 1024, 'maxSize'=>1000 * 1024,'wrongExtension'=>'只能上传{extensions}格式的图片。', 'tooSmall'=>'图片大小不能小于20KB。', 'tooBig'=>'图片大小不能超过1MB。'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => '邮箱',
            'auth_key' => '身份验证码',
            'password_hash' => '密码',
            'password' => '密码',
            'nickname' => '昵称',
            'avatar' => '头像',
            'status' => '状态 1正常 2禁用',
            'created_at' => '创建时间',
            'verifyCode' => '验证码',
            'code' => '邮箱验证码',
        ];
    }

    /**
     * 验证码
     * @param $attribute
     * @param $params
     */
    public function validateVerifyCode($attribute, $params)
    {
        if (!$this->hasErrors()) {
            $captchaValidate  = new \yii\captcha\CaptchaAction($this->captchaName, Yii::$app->controller);
            $verifyCode = $captchaValidate->getVerifyCode();
            if(strcasecmp($this->$attribute, $verifyCode) !== 0){
                $this->addError($attribute, '验证码错误。');
            }
        }
    }

    /**
     * 邮箱验证验
     * @param $attribute
     * @param $params
     */
    public function validateCode($attribute, $params)
    {
        if (!$this->hasErrors()) {
            $code = Yii::$app->cache->get(md5(self::$codeNamePrefix . $this->username));
            if ($this->$attribute != $code) {
                $this->addError($attribute, '邮箱验证码错误。');
            }
        }
    }

    /**
     * @inheritdoc
     */
    public function beforeSave($insert)
    {
        if($this->password){
            $this->setPassword($this->password);
            $this->generateAuthKey();
            $this->created_at = time();
        }

        if($this->isNewRecord){
            $this->status = self::STATUS_ACTIVE;
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username, 'status' => [self::STATUS_ACTIVE, self::STATUS_DISABLE]]);
    }

    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
            'status' => self::STATUS_ACTIVE,
        ]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return bool
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int) substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }
}
